services:
  scheduler:
    image: "crazynds/web-programming-fight:latest"
    environment:
      FUNCTION: "scheduler"
    restart: unless-stopped
    networks:
      - app_network
    volumes:
      - "logs_v:/app/storage/logs:rw"
      - "public_v:/app/storage/app/public:rw"
      - ".env:/app/.env:ro"
    healthcheck:
      disable: true
    depends_on:
      redis:
        condition: service_healthy
      mysql:
        condition: service_healthy

  webserver:
    image: "crazynds/web-programming-fight:latest"
    environment:
      FUNCTION: "webserver"
      WEB_THREADS: 2
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
    networks:
      - app_network
    volumes_from:
      - scheduler
    depends_on:
      - scheduler

  reverb:
    image: "crazynds/web-programming-fight:latest"
    environment:
      FUNCTION: "reverb"
    restart: unless-stopped
    ports:
      - "${REVERB_SERVER_PORT:-8080}:${REVERB_SERVER_PORT:-8080}"
    networks:
      - app_network
    volumes_from:
      - scheduler
    depends_on:
      - scheduler
    healthcheck:
      disable: true

  pulse:
    image: "crazynds/web-programming-fight:latest"
    environment:
      FUNCTION: "pulse"
    restart: unless-stopped
    networks:
      - app_network
    volumes_from:
      - scheduler
    depends_on:
      - scheduler
    healthcheck:
      disable: true

  worker:
    image: "crazynds/web-programming-fight:latest"
    privileged: true
    restart: unless-stopped
    environment:
      FUNCTION: "worker"
    networks:
      - app_network
    tmpfs:
      - "/var/work"
    volumes_from:
      - scheduler
    depends_on:
      - scheduler
    healthcheck:
      disable: true

  mysql:
    image: "mysql/mysql-server:8.0"
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: "${DB_PASSWORD}"
      MYSQL_ROOT_HOST: "%"
      MYSQL_DATABASE: "${DB_DATABASE}"
      MYSQL_USER: "${DB_USERNAME}"
      MYSQL_PASSWORD: "${DB_PASSWORD}"
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
    volumes:
      - "db_v:/var/lib/mysql"
    networks:
      - app_network
    healthcheck:
      test:
        - CMD
        - mysqladmin
        - ping
        - "-p${DB_PASSWORD}"
      retries: 3
      timeout: 5s
  redis:
    image: "redis:alpine"
    restart: unless-stopped
    tmpfs:
      - /data
    networks:
      - app_network
    healthcheck:
      test:
        - CMD
        - redis-cli
        - ping
      retries: 3
      timeout: 5s
    command: 'redis-server --save "" --appendonly no'

  minio:
    image: "minio/minio:latest"
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: sail
      MINIO_ROOT_PASSWORD: password
    volumes:
      - "minio_v:/data/minio"
    networks:
      - app_network
    entrypoint: sh
    command: -c 'mkdir -p /data/minio/${AWS_BUCKET} && minio server /data/minio --console-address ":8900"'
    healthcheck:
      test:
        - CMD
        - curl
        - "-f"
        - "http://localhost:9000/minio/health/live"
      retries: 3
      timeout: 5s

networks:
  app_network:
    driver: bridge
volumes:
  logs_v:
    driver: local
  public_v:
    driver: local
  db_v:
    driver: local
  minio_v:
    driver: local
