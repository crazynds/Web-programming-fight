services:
  scheduler:
    build:
      context: .
      dockerfile: ./docker/prod/Dockerfile
      target: php_schedule
      args:
          WWWGROUP: '${WWWGROUP}'
    restart: unless-stopped
    networks:
      - app_network
    volumes:
      - "logs_v:/var/www/html/storage/logs:rw"
    depends_on:
      redis:
        condition: service_healthy
      mysql:
        condition: service_healthy

  worker:
    build:
      context: .
      dockerfile: ./docker/prod/Dockerfile
      target: php_worker
      args:
          WWWGROUP: '${WWWGROUP}'
    restart: unless-stopped
    privileged: true
    networks:
      - app_network
    volumes_from:
      - scheduler
    depends_on:
      - scheduler

  webserver:
    build:
      context: .
      dockerfile: ./docker/prod/Dockerfile.web
    restart: unless-stopped
    volumes:
      - "./docker/prod/nginx.conf:/etc/nginx/conf.d/default.conf:ro"
      - "./docker/prod/php.ini:/etc/php/8.2/fpm/conf.d/app.ini:ro"
    ports:
      - "${HTTP_PORT}:80"
    networks:
      - app_network
    depends_on:
      - scheduler
  mysql:
    image: "mysql/mysql-server:8.0"
    environment:
      MYSQL_ROOT_PASSWORD: "${DB_PASSWORD}"
      MYSQL_ROOT_HOST: "%"
      MYSQL_DATABASE: "${DB_DATABASE}"
      MYSQL_USER: "${DB_USERNAME}"
      MYSQL_PASSWORD: "${DB_PASSWORD}"
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
    volumes:
      - "db_v:/var/lib/mysql"
    networks:
      - app_network
    healthcheck:
      test:
        - CMD
        - mysqladmin
        - ping
        - "-p${DB_PASSWORD}"
      retries: 3
      timeout: 5s
  redis:
    image: "redis:alpine"
    tmpfs:
      - /data
    networks:
      - app_network
    healthcheck:
      test:
        - CMD
        - redis-cli
        - ping
      retries: 3
      timeout: 5s
    command: 'redis-server --save "" --appendonly no'

  minio:
    image: "minio/minio:latest"
    environment:
      MINIO_ROOT_USER: sail
      MINIO_ROOT_PASSWORD: password
    volumes:
      - "minio_v:/data/minio"
    networks:
      - app_network
    entrypoint: sh
    command: -c 'mkdir -p /data/minio/${AWS_BUCKET} && minio server /data/minio --console-address ":8900"'
    healthcheck:
      test:
        - CMD
        - curl
        - "-f"
        - "http://localhost:9000/minio/health/live"
      retries: 3
      timeout: 5s
networks:
  app_network:
    driver: bridge
volumes:
  logs_v:
    driver: local
  db_v:
    driver: local
  minio_v:
    driver: local
